//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : MemberManager.java
//  @ Date : 3/16/2013
//  @ Author : 
//
//

package ft.team1.se21.manager;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import ft.team1.se21.constants.Constants;
import ft.team1.se21.datafile.*;
import ft.team1.se21.exception.FileIsEmptyException;
import ft.team1.se21.exception.MemberAlreadyPresentException;
import ft.team1.se21.exception.MemberNotFoundException;
import ft.team1.se21.model.*;
import ft.team1.se21.ui.MemberUI;


public class MemberManager {
	public Object memberName;
	public void addMember(Member memberDetail) {
	
	}
	public void start(){
		MemberUI ui = new MemberUI(this);
	}
	
	
	public void validateMember(Object String) {
	
	}
	
	public int getPoints(Object String) {
	
		return 1;
	}
	
	public void generateReport() {
	
	}
	
	public Member getMemberDetails(String memberId){
		return new Member();
	}
//get member detail if exist	
	public Member getMember(String memberId)throws IOException {
		String path = Constants.MEMBER_PATH;
		Member member = new Member();
		MemberDataFile d = new MemberDataFile();	
		List <Member> mList = new ArrayList <Member> ();
		mList = d.readMembers(path);
		Iterator<Member> MemberIterator = mList.iterator();
		try {
			while (MemberIterator.hasNext()) {
				member = MemberIterator.next();
				if (memberId.equals(member.getMemberId()))
					break;
			}
		} catch (Exception e) {
			 throw new MemberAlreadyPresentException("Member already exist");
		}	
		return member;
	}

	//add new member to mamber.dat
	public void addMember(String UserName, String Password)throws MemberNotFoundException{
		try {
			 Member member=getMember(UserName);
			 member.setMemberId(UserName);
			 member.setFirstTimeStatus(true);
			 member.setPoints(0);
			 String path = Constants.MEMBER_PATH;
			 MemberDataFile d = new MemberDataFile();	
			 List <Member> mList = new ArrayList <Member> ();
			 mList = d.readMembers(path);
			 mList.add(member);

			 throw new MemberNotFoundException("Member not found");
			
		} 
		catch (Exception MemberAlreadyPresent){
			throw new MemberAlreadyPresent("Member already exist");
		}
			

	}
	
	
	
	public void updateMember(Member memberDetail){
		MemberDataFile M = new MemberDataFile();
//		M.writeMembers(Constants.MEMBER_PATH);
	}
	
}
